import 'package:geolocator/geolocator.dart';

class LocationService {
  // V√©rifier si la g√©olocalisation est activ√©e
  Future<bool> isLocationServiceEnabled() async {
    bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      print("‚ùå Les services de localisation sont d√©sactiv√©s.");
    }
    return serviceEnabled;
  }

  // V√©rifier et demander les permissions de localisation
  Future<LocationPermission> checkAndRequestPermission() async {
    LocationPermission permission = await Geolocator.checkPermission();

    if (permission == LocationPermission.denied) {
      print("üî¥ Permission de localisation refus√©e. Demande en cours...");
      permission = await Geolocator.requestPermission();
    }

    if (permission == LocationPermission.deniedForever) {
      print("‚õî Permission de localisation refus√©e d√©finitivement.");
    }

    return permission;
  }

  // Obtenir la position actuelle avec gestion des erreurs et timeout
  Future<Position> getCurrentPosition() async {
    bool serviceEnabled = await isLocationServiceEnabled();
    if (!serviceEnabled) {
      return Future.error('‚ö†Ô∏è Activez les services de localisation.');
    }

    LocationPermission permission = await checkAndRequestPermission();
    if (permission == LocationPermission.denied || permission == LocationPermission.deniedForever) {
      return Future.error('‚ùå Autorisation de localisation refus√©e.');
    }

    try {
      return await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
        timeLimit: const Duration(seconds: 10), // √âvite un blocage trop long
      );
    } catch (e) {
      print("‚ö†Ô∏è Erreur lors de la r√©cup√©ration de la position : $e");
      return Future.error('Erreur lors de la localisation.');
    }
  }
}